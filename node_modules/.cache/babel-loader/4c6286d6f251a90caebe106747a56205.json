{"ast":null,"code":"var _jsxFileName = \"/Users/damiankieltyka/Developer/WebStorm Projects/online-store-react/src/containers/ProductListContainer.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ProductList from '../components/ProductList/ProductList';\nimport SortingPanel from '../components/SortingPanel/SortingPanel';\nimport PaginationPanel from '../components/PaginationPanel/PaginationPanel';\nimport { getProducts, sortProducts, getCategory, searchProducts, getProduct, changeProductPage } from '../actions/products-actions';\nimport { addToCart } from '../actions/cart-actions';\nimport './ProductListContainer.scss';\n\nclass ProductListContainer extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      updateProductList: 1\n    };\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          getProducts = _this$props.getProducts,\n          searchProducts = _this$props.searchProducts;\n    getProducts();\n    searchProducts('');\n    const filterButton = document.getElementById('filterButton');\n    const sortingPanel = document.getElementById('sortingPanel').classList;\n    filterButton.classList.add('visible');\n    filterButton.addEventListener('click', () => {\n      filterButton.classList.toggle('active');\n      sortingPanel.toggle('active');\n      if (sortingPanel.contains('active')) this.pageScrollUp();\n    });\n  }\n\n  componentWillUnmount() {\n    const filterButtonClass = document.getElementById('filterButton').classList;\n    filterButtonClass.remove('visible');\n    if (filterButtonClass.contains('active')) filterButtonClass.remove('active');\n  }\n\n  getProductsForPage() {\n    const _this$props2 = this.props,\n          shownProducts = _this$props2.shownProducts,\n          productsPerPage = _this$props2.productsPerPage,\n          currentPage = _this$props2.currentPage,\n          shownCategory = _this$props2.shownCategory;\n    const lastShownProductIndex = currentPage * productsPerPage;\n    const firstShownProductIndex = lastShownProductIndex - productsPerPage;\n    return shownCategory !== 'All' ? shownProducts.filter(product => {\n      return product.category === shownCategory;\n    }).slice(firstShownProductIndex, lastShownProductIndex) : shownProducts.slice(firstShownProductIndex, lastShownProductIndex);\n  }\n\n  pageScrollUp() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n    this.setState({\n      updateProductList: Math.random()\n    });\n  }\n\n  renderPaginationButtons() {\n    const _this$props3 = this.props,\n          shownProducts = _this$props3.shownProducts,\n          shownCategory = _this$props3.shownCategory,\n          productsPerPage = _this$props3.productsPerPage,\n          currentPage = _this$props3.currentPage,\n          changeProductPage = _this$props3.changeProductPage;\n    let paginationButtons = [];\n\n    for (let i = 0; i < (shownCategory === 'All' ? shownProducts.length : shownProducts.filter(product => product.category === shownCategory).length) / productsPerPage; i++) {\n      paginationButtons.push(React.createElement(\"li\", {\n        key: i,\n        className: `paginationButton ${i + 1 === currentPage ? 'active' : ''}`,\n        onClick: () => {\n          this.pageScrollUp();\n          changeProductPage(i + 1);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, i + 1));\n    }\n\n    return paginationButtons;\n  }\n\n  render() {\n    const _this$props4 = this.props,\n          shownCategory = _this$props4.shownCategory,\n          searchProducts = _this$props4.searchProducts,\n          sortProducts = _this$props4.sortProducts,\n          getCategory = _this$props4.getCategory,\n          getProduct = _this$props4.getProduct,\n          addToCart = _this$props4.addToCart,\n          currentPage = _this$props4.currentPage,\n          changeProductPage = _this$props4.changeProductPage,\n          cartItems = _this$props4.cartItems;\n    return React.createElement(\"div\", {\n      className: \"productListContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"mainContent container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(SortingPanel, {\n      sortProducts: sortingType => {\n        this.pageScrollUp();\n        sortProducts(sortingType);\n      },\n      getCategory: category => {\n        this.pageScrollUp();\n        getCategory(category);\n      },\n      getAll: () => searchProducts(''),\n      shownCategory: shownCategory,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(ProductList, {\n      products: this.getProductsForPage(),\n      getProduct: id => getProduct(id),\n      addToCart: id => addToCart(id),\n      cartItems: cartItems,\n      updateProducts: this.state.updateProductList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    })), React.createElement(PaginationPanel, {\n      changePageNumber: targetNumber => changeProductPage(targetNumber),\n      currentPage: currentPage,\n      renderPaginationButtons: this.renderPaginationButtons(),\n      pageScrollUp: () => this.pageScrollUp(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst mapStateToProps = store => ({\n  products: store.productsReducer.products,\n  shownProducts: store.productsReducer.shownProducts,\n  shownCategory: store.productsReducer.shownCategory,\n  searchText: store.productsReducer.searchText,\n  currentPage: store.productsReducer.currentPage,\n  productsPerPage: store.productsReducer.productsPerPage,\n  cartItems: store.cartReducer.cartItems\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getProducts: () => dispatch(getProducts()),\n  sortProducts: sortingType => dispatch(sortProducts(sortingType)),\n  getCategory: category => dispatch(getCategory(category)),\n  searchProducts: searchText => dispatch(searchProducts(searchText)),\n  getProduct: id => dispatch(getProduct(id)),\n  addToCart: id => dispatch(addToCart(id)),\n  changeProductPage: targetPage => dispatch(changeProductPage(targetPage))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductListContainer);","map":{"version":3,"sources":["/Users/damiankieltyka/Developer/WebStorm Projects/online-store-react/src/containers/ProductListContainer.js"],"names":["React","Component","connect","ProductList","SortingPanel","PaginationPanel","getProducts","sortProducts","getCategory","searchProducts","getProduct","changeProductPage","addToCart","ProductListContainer","constructor","props","state","updateProductList","componentDidMount","filterButton","document","getElementById","sortingPanel","classList","add","addEventListener","toggle","contains","pageScrollUp","componentWillUnmount","filterButtonClass","remove","getProductsForPage","shownProducts","productsPerPage","currentPage","shownCategory","lastShownProductIndex","firstShownProductIndex","filter","product","category","slice","window","scrollTo","top","behavior","setState","Math","random","renderPaginationButtons","paginationButtons","i","length","push","render","cartItems","sortingType","id","targetNumber","mapStateToProps","store","products","productsReducer","searchText","cartReducer","mapDispatchToProps","dispatch","targetPage"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ProductList from '../components/ProductList/ProductList';\nimport SortingPanel from '../components/SortingPanel/SortingPanel';\nimport PaginationPanel from '../components/PaginationPanel/PaginationPanel';\nimport { getProducts, sortProducts, getCategory, searchProducts, getProduct, changeProductPage } from '../actions/products-actions';\nimport { addToCart } from '../actions/cart-actions';\nimport './ProductListContainer.scss';\n\nclass ProductListContainer extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      updateProductList: 1\n    };\n  }\n\n  componentDidMount() {\n    const { getProducts, searchProducts } = this.props;\n    getProducts();\n    searchProducts('');\n\n    const filterButton = document.getElementById('filterButton');\n    const sortingPanel = document.getElementById('sortingPanel').classList;\n    filterButton.classList.add('visible');\n    filterButton.addEventListener('click', () => {\n      filterButton.classList.toggle('active');\n      sortingPanel.toggle('active');\n      if (sortingPanel.contains('active')) this.pageScrollUp();\n    });\n  }\n\n  componentWillUnmount() {\n    const filterButtonClass = document.getElementById('filterButton').classList;\n    filterButtonClass.remove('visible');\n    if (filterButtonClass.contains('active')) filterButtonClass.remove('active');\n  }\n\n  getProductsForPage() {\n    const { shownProducts, productsPerPage, currentPage, shownCategory } = this.props;\n    const lastShownProductIndex = currentPage * productsPerPage;\n    const firstShownProductIndex = lastShownProductIndex - productsPerPage;\n    return shownCategory !== 'All' ?\n      shownProducts.filter(product => {\n        return product.category === shownCategory\n      }).slice(firstShownProductIndex, lastShownProductIndex)\n    :\n      shownProducts.slice(firstShownProductIndex, lastShownProductIndex);\n  }\n\n  pageScrollUp() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n    this.setState({\n      updateProductList: Math.random()\n    });\n  }\n\n  renderPaginationButtons() {\n    const { shownProducts, shownCategory, productsPerPage, currentPage, changeProductPage } = this.props;\n    let paginationButtons = [];\n    for (let i = 0; i < ((shownCategory === 'All' ? shownProducts.length : shownProducts.filter(product => product.category === shownCategory).length) / productsPerPage); i++) {\n      paginationButtons.push(<li key={i} className={`paginationButton ${i + 1 === currentPage ? 'active' : ''}`} onClick={() => {this.pageScrollUp(); changeProductPage(i + 1)}}>{i + 1}</li>);\n    }\n    return paginationButtons;\n  }\n\n  render() {\n    const { shownCategory, searchProducts, sortProducts, getCategory, getProduct, addToCart, currentPage, changeProductPage, cartItems } = this.props;\n    return (\n      <div className=\"productListContainer\">\n        <div className=\"mainContent container\">\n          <div className=\"row\">\n            <SortingPanel\n              sortProducts={(sortingType) => {this.pageScrollUp(); sortProducts(sortingType)}}\n              getCategory={(category) => {this.pageScrollUp(); getCategory(category)}}\n              getAll={() => searchProducts('')}\n              shownCategory={shownCategory}\n            />\n            <ProductList\n              products={this.getProductsForPage()}\n              getProduct={(id) => getProduct(id)}\n              addToCart={(id) => addToCart(id)}\n              cartItems={cartItems}\n              updateProducts={this.state.updateProductList}\n            />\n          </div>\n          <PaginationPanel\n            changePageNumber={(targetNumber) => changeProductPage(targetNumber)}\n            currentPage={currentPage}\n            renderPaginationButtons={this.renderPaginationButtons()}\n            pageScrollUp={() => this.pageScrollUp()}\n          />\n        </div>\n      </div>\n    );\n  };\n}\n\nconst mapStateToProps = store => ({\n  products: store.productsReducer.products,\n  shownProducts: store.productsReducer.shownProducts,\n  shownCategory: store.productsReducer.shownCategory,\n  searchText: store.productsReducer.searchText,\n  currentPage: store.productsReducer.currentPage,\n  productsPerPage: store.productsReducer.productsPerPage,\n  cartItems: store.cartReducer.cartItems\n});\n\nconst mapDispatchToProps = dispatch => ({\n  getProducts: () => dispatch(getProducts()),\n  sortProducts: sortingType => dispatch(sortProducts(sortingType)),\n  getCategory: category => dispatch(getCategory(category)),\n  searchProducts: searchText => dispatch(searchProducts(searchText)),\n  getProduct: id => dispatch(getProduct(id)),\n  addToCart: id => dispatch(addToCart(id)),\n  changeProductPage: targetPage => dispatch(changeProductPage(targetPage))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductListContainer);\n"]},"metadata":{},"sourceType":"module"}